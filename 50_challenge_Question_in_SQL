create database mysql_assignment_25db;
use mysql_assignment_25db;

create table CITY
(
	ID int,
    NAME VARCHAR(17),
    COUNTRYCODE VARCHAR(30),
    DISTRICT VARCHAR(20),
    POPULATION INT
);

alter table CITY modify column DISTRICT VARCHAR(100);
alter table CITY modify column COUNTRYCODE VARCHAR(30);
describe CITY;

INSERT INTO CITY values (6,'Rotterdam', 'NLD' , 'Zuid-Holland' , 593321);
insert into CITY VALUES(3878,'Scottsdale','USA','Arizona',202705);
insert into CITY VALUES(3965,'Corona','USA','California',124966);
insert into CITY VALUES(3973,'Concord','USA','California',121780);
insert into CITY VALUES(3977,'Cedar Rapids','USA','Iowa',120758);
insert into CITY VALUES(3982,'Coral Springs','USA','Florida',117549);
insert into CITY VALUES(4054,'Fairfield','USA','California',92256);
insert into CITY VALUES(4058,'Boulder','USA','Colorado',91238);
insert into CITY VALUES(4061,'Fall River','USA','Massachusetts',90555);

SELECT * FROM CITY;  

SELECT * FROM CITY WHERE POPULATION > 100000;
#Q1. Query all columns for all American cities in the CITY table with populations larger than 100000.
#The CountryCode for America is USA.


select * from CITY where COUNTRYCODE = "USA" AND POPULATION > 100000;


#UPDATE COLUMN NAME TO FULL_NAME BECAUSE NAME IS A INNER KEYWORD
ALTER TABLE CITY RENAME COLUMN NAME TO FULL_NAME;



#Q2. Query the NAME field for all American cities in the CITY table with populations larger than 120000.
#The CountryCode for America is USA.
#The CITY table is described as follows:

SELECT  FULL_NAME FROM CITY   WHERE  COUNTRYCODE = "USA" AND POPULATION > 120000;


#Q3. Query all columns (attributes) for every row in the CITY table.
#The CITY table is described as follows:

SELECT * FROM CITY;

#Q4. Query all columns for a city in CITY with the ID 1661.
#The CITY table is described as follows
SELECT * FROM CITY WHERE ID = 1661;


#Q5. Query all attributes of every Japanese city in the CITY table. The COUNTRYCODE for Japan is
#JPN.
#The CITY table is described as follows:

SELECT * FROM CITY WHERE COUNTRYCODE = 'JPN';

#Q6. Query the names of all the Japanese cities in the CITY table. The COUNTRYCODE for Japan is
#JPN.
#The CITY table is described as follows
SELECT FULL_NAME FROM CITY where COUNTRYCODE = JPN;


CREATE table IF NOT exists STATION
(
	ID INT,
    CITY VARCHAR(20),
    STATE VARCHAR(20),
    LAT_N int,
    LONG_W int
);

DESCRIBE STATION;

INSERT INTO STATION VALUES(794,'Kissee Mills','MO',139,73);
INSERT INTO STATION VALUES(824,'Loma Mar','CA',48,130);
INSERT INTO STATION VALUES(603,'Sandy Hook','CT',72,148);
INSERT INTO STATION VALUES(478,'Tipton','IN',33,97);
INSERT INTO STATION VALUES(619,'Arlington','CO',75,92);
INSERT INTO STATION VALUES(711,'Turner','AR',50,101);
INSERT INTO STATION VALUES(839,'Slidell','LA',85,151);
INSERT INTO STATION VALUES(411,'Negreet','LA',98,105);
INSERT INTO STATION VALUES(588,'Glencoe','KY',46,136);
INSERT INTO STATION VALUES(665,'Chelsea','IA',98,59);
INSERT INTO STATION VALUES(342,'Chignik Lagoon','AK',103,153);
INSERT INTO STATION VALUES(733,'Pelahatchie','MS',38,28);
INSERT INTO STATION VALUES(811,'Dorrance','KS',102,121);
INSERT INTO STATION VALUES(698,'Albany','CA',49,80);
INSERT INTO STATION VALUES(325,'Monument','KS',70,141);
INSERT INTO STATION VALUES(414,'Manchester','MD',73,37);
INSERT INTO STATION VALUES(113,'Prescott','IA',39,65);
INSERT INTO STATION VALUES(971,'Graettinger','IA',94,150);
INSERT INTO STATION VALUES(266,'Cahone','CO',116,127);
INSERT INTO STATION VALUES(266,'Cahone','CO',116,127);


SELECT * FROM STATION;

#Q7. Query a list of CITY and STATE from the STATION table.
#The STATION table is described as follows:
 select CITY,STATE FROM STATION;
 
#Q8. Query a list of CITY names from STATION for cities that have an even ID number. Print the results
#in any order, but exclude duplicates from the answer.

select distinct(city) as CITY_NAME from station where ID%2 = 0 order by City;

#Q9. Find the difference between the total number of CITY entries in the table and the number of
#distinct CITY entries in the table

select count(CITY) as Total_Number_of_City ,count(distinct(CITY)) as TOTAL_UNIQUE_CITY ,count(CITY) - count(distinct(CITY)) as DIFFERENCE_BETWEEN_TWO_CITY from STATION;

    
#Q10. Query the two cities in STATION with the shortest and longest CITY names, as well as their respective lengths (i.e.: number of characters in the name). If there is more than one smallest or largest city, choose the one that comes first when ordered alphabetically.

select length(CITY) AS LENGTH_OF_CITY, CITY FROM STATION ORDER BY length(CITY)  ASC limit 1 ;

select length(CITY) AS LENGTH_OF_CITY, CITY FROM STATION ORDER BY length(CITY)  DESC limit 1 ;


#Q11. Query the list of CITY names starting with vowels (i.e., a, e, i, o, or u) from STATION. Your result
#cannot contain duplicates.

select distinct(CITY) AS DISTINCT_CITY_NAME FROM STATION WHERE LOWER(SUBSTR(CITY,1,1)) IN ('a','e','i','o','u');

SELECT DISTINCT CITY FROM STATION
WHERE lcase(CITY) LIKE 'a%'
OR lcase(CITY) LIKE 'e%'
OR lcase(CITY) LIKE 'i%'
OR lcase(CITY) LIKE 'o%'
OR lcase(CITY) LIKE 'u%'
ORDER BY CITY;


#Q12. Query the list of CITY names ending with vowels (a, e, i, o, u) from STATION. Your result cannot
#ontain duplicates.

SELECT DISTINCT CITY FROM STATION
WHERE lcase(CITY) LIKE '%a%'
OR lcase(CITY) LIKE '%e%'
OR lcase(CITY) LIKE '%i%'
OR lcase(CITY) LIKE '%o%'
OR lcase(CITY) LIKE '%u%'
ORDER BY CITY;

select distinct CITY from STATION where CITY not regexp '^[aeiou]' or city not regexp '[aeiou]$';



Create table if not exists product
(
	Product_id int,
    Product_name varchar(50),
    unit_price int,
    constraint mk primary key(Product_id)
);
   
   
insert into Product values(1,'S8',1000);
insert into Product values(2,'G4',800);
insert into Product values(3,'iPhone',1400);

select*FROM product;

create table sales
(
	seller_id int,
    product_id int,
    buyer_id int,
    sale_date date,
    quantity int,
    price int,
    constraint fk foreign key (product_id) references product(product_id)
);
    
describe sales;

insert into sales values(1 ,1, 1, '2019-01-21' ,2, 200);
insert into sales values(1, 2 ,2, '2019-02-17' ,1, 800);
insert into sales values(2 ,2 ,3 ,'2019-06-02' ,1 ,800);
insert into sales values(3 ,3, 4 ,'2019-05-13', 2, 2800);

select * from sales;

select product_id,
	   Product_name
From product
where Product_id Not in (select Product_id 
						from sales
                        where sale_date not between
								'2019-01-01' and '2019-03-31');


select product_id,
	   Product_name
From product
where Product_id  in (select Product_id 
						from sales
                        where sale_date  between
								'2019-01-01' and '2019-03-31');

create table if not exists Views
(
    article_id int,
    author_id int,
    viewer_id int,
    view_date date
);


insert into Views VALUES (1,3,5,'2019-08-01'), (1,3,6,'2019-08-02'),(2,7,7,'2019-08-01'),(2,7,6,'2019-08-02'), (4,7,1,'2019-07-22'), (3,4,4,'2019-07-21'),(3,4,4,'2019-07-21');

select * from Views;

select distinct(author_id)  as id from Views where author_id = viewer_id order by author_id asc;


create table if not exists Delivery4
(
	delivery_id int,
	customer_id int,
	order_date date,
	customer_pref_delivery_date date,
    constraint pk primary key(delivery_id)
);

insert into Delivery4 values (1,1,'2019-08-01','2019-08-02'),(2,5,'2019-08-02','2019-08-02'),(3,1,'2019-08-11','2019-08-11'),(4,3,'2019-08-24','2019-08-26'),(5,4,'2019-08-21','2019-08-22'),(6,2,'2019-08-11','2019-08-13');
select * from Delivery4;

select round(100*d2.immediate_orders/count(d1.delivery_id), 2) as immediate_percentage
from Delivery4 d1,
    (select count(order_date) as immediate_orders
    from Delivery4 
    where (order_date = customer_pref_delivery_date)) d2;
    
    
create table if not exists Ads
(
    ad_id int,
    user_id int,    
    action enum('Clicked', 'Viewed', 'Ignored'),
    constraint pk PRIMARY KEY (ad_id, user_id)   
);

describe Ads;
insert into Ads VALUES (1,1,'Clicked'),(2,2,'Clicked'),(3,3,'Viewed'),(5,5,'Ignored'),(1,7,'Ignored'),(2,7,'Viewed'),(3,5,'Clicked'),(1,4,'Viewed'),(2,11,'Viewed'),(1,2,'Clicked');

select * from Ads;

select ad_id,
ifnull(
    round(
        avg(
            case
                when action = "Clicked" then 1
                when action = "Viewed" then 5
                else null
            end
        ) ,
    2),
0)
as ctr
from Ads
group by ad_id
order by ctr desc, ad_id asc;

# Q21.
# Table: Employee

create table if not exists Employee
(
    employee_id int,
    team_id int,
    constraint pk PRIMARY KEY (employee_id)
);


insert into Employee VALUES(1,8),(2,8),(3,8),(4,7),(5,9),(6,9);

select * from Employee;

# Write an SQL query to find the team size of each of the employees.
# Return result table in any order.

select employee_id, 
		count(team_id) 	
				over(partition by team_id ) as team_size
			from Employee order by team_size desc;





# Q22.
# Table: Countries

create table if not exists Countries
(
    country_id int not null,
    country_name varchar(50),
    constraint pk PRIMARY KEY (country_id)
);


insert into Countries VALUES (2,'USA'),(3,'Australia'),(7,'Peru'),(5,'China'),(8,'Morocco'),(9,'Spain');

select * from Countries;

# Table: Weather
create table if not exists Weather
(
    country_id int,
    weather_state int,
    day date,
    constraint pk PRIMARY KEY (country_id, day)
);

insert into Weather VALUES (2,15,'2019-11-01'),(2,12,'2019-10-28'),(2,12,'2019-10-27'),(3,-2,'2019-11-10'),(3,0,'2019-11-11'),(3,3,'2019-11-12'),(5,16,'2019-11-07'),(5,18,'2019-11-09'),(5,21,'2019-11-23'),(7,25,'2019-11-28'),(7,22,'2019-12-01'),(7,20,'2019-12-02'),(8,25,'2019-11-05'),(8,27,'2019-11-15'),(8,31,'2019-11-25'),(9,7,'2019-10-23'),(9,3,'2019-12-23');

select * from Weather;

select c.*,
		case
			when avg(w.weather_state*1.0) <= 15 then 'Cold'
            when avg(w.weather_state*1.0) >= 25 then 'Hot'
            else 'Warm'
		end as Weather_Condition
	from countries as c
    inner join weather w on c.country_id = w.country_id
where w.day  between '2019-11-01' and '2019-11-30'
group by c.country_id;
            
# Q23.
# Table: Prices
create table if not exists Prices
(
    product_id int,
    start_date date,
    end_date date,
    price int,
    constraint pk PRIMARY KEY (product_id, start_date, end_date)    
);

insert into Prices VALUES (1,'2019-02-17','2019-02-28',5),(1,'2019-03-01','2019-03-22',20),(2,'2019-02-01','2019-02-20',15),(2,'2019-02-21','2019-03-31',30);

select * from Prices;

create table if not exists UnitsSold
(
    product_id int,
    purchase_date date,
    units int
);


insert into UnitsSold VALUES (1,'2019-02-25',100),(1,'2019-03-01',15),(2,'2019-02-10',200),(2,'2019-03-22',30);

select * from UnitsSold;

select a.product_id,
		round(SUM(a.units*b.price)/sum(a.units),2) as average_price
from UnitsSold a
		inner JOIN Prices b
        ON (a.product_id = b.product_id
			AND a.purchase_date >= b.start_date
			AND a.purchase_date <= b.end_date)
GROUP BY product_id;

select a.product_id,
	round(sum(a.units*b.price)/sum(a.units),2) as average_price
from UnitsSold a 
		Join Prices b
			ON (a.product_id = b.product_id
			AND a.purchase_date >= b.start_date
			AND a.purchase_date <= b.end_date)
	group by product_id;
        
create table if not exists Activity1
(
	player_id int,
	device_id int,
	event_date date,
	games_played int DEFAULT 0,
    constraint pk primary key(player_id, event_date)
);

INSERT into Activity1 values (1,2,'2016-03-01',5),(1,2,'2016-05-02',6),(2,3,'2017-06-25',1),(3,1,'2016-03-02',0),(3,4,'2018-07-03',5);

describe Activity1;


# Q24
select 
     tmp.player_id,tmp.event_date as first_login,tmp.row_num
from (select *,
        row_number() over(partition by player_id ) as row_num
     from Activity1) tmp
     where tmp.row_num =1;
     
# Q25     
select 
		a.player_id,a.device_id as First_device_login , a.row_num
from (select *,
		row_number() over (partition by player_id ) as row_num
        from Activity1) a
        where a.row_num=1;
        
select *,
        sum(device_id) over(partition by player_id ) as row_num
     from Activity1;
     
     
# Q26
create table Products
(
	product_id int,
	product_name varchar(20),
	product_category varchar(20),
    constraint pk primary key(product_id)
);

create table if not exists orders
(
	product_id int,
	order_date date,
	unit int,
    constraint fkk foreign key (product_id) references products(product_id)
);

insert into orders values (1,'2020-02-05',60),(1,'2020-02-10',70),(2,'2020-01-18',30),(2,'2020-02-11',80),(3,'2020-02-17',2),(3,'2020-02-24',3),(4,'2020-03-01',20),(4,'2020-03-04',30),(4,'2020-03-04',60),(5,'2020-02-25',50),(5,'2020-02-27',50),(5,'2020-03-01',50);

select * from orders;

# Q26

create table if not exists Products12
(
    product_id int,
    product_name VARCHAR(50),
    product_category VARCHAR(50),
    constraint pk PRIMARY KEY (product_id)  
);

insert into Products12 values (1,'Leetcode Solutions','Book'),(2,'Jewels of Stringology','Book'),(3,'HP','Laptop'),(4,'Lenovo','Laptop'),(5,'Leetcode Kit','T-shirt');

select * from Products12;



create table if not exists Orders24
(
    product_id int,
    order_date date,
    unit int,
    constraint fk4 FOREIGN KEY (product_id) REFERENCES Products12(product_id) 
);

insert into Orders24 values (1,'2020-02-05',60),(1,'2020-02-10',70),(2,'2020-01-18',30),(2,'2020-02-11',80),(3,'2020-02-17',2),(3,'2020-02-24',3),(4,'2020-03-01',20),(4,'2020-03-04',30),(4,'2020-03-04',60),(5,'2020-02-25',50),(5,'2020-02-27',50),(5,'2020-03-01',50);

select * from Orders24;
	
select a.product_name , 
		sum(b.unit) as  Total_unit
			from Orders24 b
		left join Products12 a on a.product_id = b.product_id
		where b.order_date between '2020-02-01' and '2020-02-29'
				group by a.product_id
                having Total_unit>=100;
 

create table if not exists users
(
	user_id int,
	name_id varchar(20),
	mail varchar(30),
    constraint pk primary key(user_id)
);
    
insert into users VALUES (1,'Winston','winston@leetcode.com'),(2,'Jonathan','jonathanisgreat'),(3,'Annabelle','bella-@leetcode.com'),(4,'Sally','sally.come@leetcode.com'),(5,'Marwan','quarz#2020@le
etcode.com'),(6,'David','david69@gmail.com'),(7,'Shapiro','.shapo@leetcode.com');

select * from users;


# Q27






# Q28.
# Table: Customers
create table if not exists Customers11
(
    customer_id int,
    name varchar(50),
    country varchar(50),
    constraint pk PRIMARY KEY (customer_id)
);


insert into Customers11 VALUES (1,'Winston','USA'),(2,'Jonathan','Peru'),(3,'Moustafa','Egypt');

select * from Customers11;





# Table: Product
create table if not exists Product121
(
    product_id int,
    description varchar(255),
    price int,
    constraint pk PRIMARY KEY (product_id)
);

insert into Product121 values (10,'LC Phone',300),(20,'LC T-Shirt',10),(30,'LC Book',45),(40,'LC Keychain',2);

select * from Product121;

# Table: Orders
create table if not exists Orders11
(
    order_id int,
    customer_id int,
    product_id int,
    order_date DATE,
    quantity int,
    constraint pk PRIMARY KEY (order_id)
    # constraint fk FOREIGN KEY (customer_id) REFERENCES Customers(customer_id),
    # constraint fk FOREIGN KEY (product_id) REFERENCES Product(product_id)
);


insert into Orders11 VALUES (1,1,10,'2020-06-10',1),(2,1,20,'2020-07-01',1),(3,1,30,'2020-07-08',2),(4,2,10,'2020-06-15',2),(5,2,40,'2020-07-01',10),(6,3,20,'2020-06-24',2),(7,3,30,'2020-06-25',2),(9,3,30,'2020-05-08',3);

select * from Orders11;

select o.customer_id,c.name
from Customers11 c, Product121 p, Orders11 o
where c.customer_id = o.customer_id and p.product_id = o.product_id
group by o.customer_id
having 
(
    sum(case when o.order_date like '2020-06%' then o.quantity*p.price else 0 end) >= 100
    and
    sum(case when o.order_date like '2020-07%' then o.quantity*p.price else 0 end) >= 100
);


# Q29
# Table: TVProgram

create table if not exists TVProgram
(
    program_date date,
    content_id int,
    channel varchar(50),
    constraint pk PRIMARY KEY (program_date, content_id)
);

insert into TVProgram VALUES ('2020-06-10 08:00',1,'LC-Channel'),('2020-05-11 12:00',2,'LC-Channel'),('2020-05-12 12:00',3,'LC-Channel'),('2020-05-13 14:00',4,'Disney Ch'),('2020-06-18 14:00',4,'Disney Ch'),('2020-07-15 16:00',5,'Disney Ch');

select * from TVProgram;

# Table: Content
create table if not exists Content
(
    content_id varchar(50),
    title varchar(50),
    Kids_content enum('Y','N'),
    content_type varchar(50),
    constraint pk PRIMARY KEY (content_id)
);

insert into Content VALUES (1,'Leetcode Movie','N','Movies'),(2,'Alg. for Kids','Y','Series'),(3,'Database Sols','N','Series'),(4,'Aladdin','Y','Movies'),(5,'Cinderella','Y','Movies');
select * from Content;

select distinct(title)
		from Content c
        inner join TVProgram T 
			on c.content_id = T.content_id
             where content_type = 'Movies'
             and Kids_content = 'Y'
             AND program_date between '2020-06-10' and '2020-06-30';
     
     
# 30.
# Table: NPV
create table if not exists NPV
(
    id int,
    year int,
    npv int,
    constraint pk PRIMARY KEY (id, year)
);

insert into NPV VALUES (1,2018,100),(7,2020,30),(13,2019,40),(1,2019,113),(2,2008,121),(3,2009,12),(11,2020,99),(7,2019,0);

select * from NPV;

# Table: Queries
create table if not exists Queries
(
    id int,
    year int,
    constraint pk PRIMARY KEY (id, year)
);

insert into Queries VALUES (1, 2019),(2,2008),(3,2009),(7,2018),(7,2019),(7,2020),(13,2019);

select * from Queries;

select Q.year,N.npv,N.id
	from Queries Q 
	left join NPV N
    on Q.id = N.id and Q.year = N.Year;
    
    
SELECT q.id, q.year, COALESCE(n.npv,0) AS npv
FROM Queries q
LEFT JOIN NPV n
ON q.id = n.id AND q.year=n.year;


select q.id,q.year, coalesce(n.npv,0) as npv
from Quaries q
LEFT JOIN NPV n
ON q.id = n.id and q.year = n.year;


# Q32

create table if not exists Employees41
(
    id int,
    name varchar(50),
    constraint pk PRIMARY KEY (id)
);

insert into Employees41 VALUES (1,'Alice'),(7,'Bob'),(11,'Meir'),(90,'Winston'),(3,'Jonathan');

select * from Employees41;




# Table: EmployeeUNI
create table if not exists EmployeeUNI
(
    id int,
    unique_id int,
    constraint pk PRIMARY KEY (id, unique_id)
);

insert into EmployeeUNI VALUES (3,1),(11,2),(90,3);
select * from EmployeeUNI;

# Write an SQL query to show the unique ID of each user, If a user does not have a unique ID replace just show null.
# Return the result table in any order.


select unique_id, name 
	from Employees
    left join EmployeeUNI
    on if (Employees.id = EmployeeUNI.id, Employees.id, null);
    


create table if not exists Employees414

(
    id int,
    name_id varchar(50),
    constraint pgk PRIMARY KEY (id)
);

insert into Employees414 VALUES (1,'Alice'),(7,'Bob'),(11,'Meir'),(90,'Winston'),(3,'Jonathan');

select * from Employees414;




# Table: EmployeeUNI
create table if not exists EmployeeUNI114
(
    id int,
    unique_id int,
    constraint plk PRIMARY KEY (id, unique_id)
);

insert into EmployeeUNI114 VALUES (3,1),(11,2),(90,3);
select * from EmployeeUNI114;

select a.unique_id,b.name_id 
			from EmployeeUNI114 a, Employees414 b 
				where a.id = b.id;
        

select a.unique_id,b.name_id 
			from EmployeeUNI11 a
		Right join Employees4 b
				on  a.id = b.id 
                order by name_id asc;
            
create table if not exists Users14
(
	id int,
	name_id  varchar(40),
    constraint pk primary key(id)
);

create table if not exists Rides11
(
	id int,
	user_id int,
	distance int,
    constraint pk primary key(id),
    constraint fvk FOREIGN KEY (user_id) REFERENCES Users14(id)
);

insert into Users14 values(1,'Alice'),(2,'Bob'),(3,'Alex'),(4,'Donald'),(7,'Lee'),(13,'Jonathan'),(19,'Elvis');

insert into Rides11 VALUES (1,1,120),(2,2,317),(3,3,222),(4,7,100),(5,13,312),(6,19,50),(7,7,120),(8,19,400),(9,7,230);


select * from Users14;

select * from Rides11;

select name_id, sum(ifnull(distance, 0)) as travelled_distance
from Rides11 r
right join Users14 u
on r.user_id = u.id
group by name_id
order by 2 desc,1 asc;

# Q33

create table if not exists Products124
(
	product_id int,
	product_name varchar(50),
	product_category varchar(50),
    constraint pk primary key(product_id)
);

insert into Products124 VALUES (1,'Leetcode Solutions','Book'),(2,'Jewels of Stringology','Book'),(3,'HP','Laptop'),(4,'Lenovo','Laptop'),(5,'Leetcode Kit','T-shirt');

select* from Products124;

create table if not exists Orders244
(
product_id int,
order_date date,
unit int
# constraint fk foreign key(product_id) references Products124(product_id)
);

insert into Orders244 values (1,'2020-02-05',60),(1,'2020-02-10',70),(2,'2020-01-18',30),(2,'2020-02-11',80),(3,'2020-02-17',2),(3,'2020-02-24',3),(4,'2020-03-01',20),(4,'2020-03-04',30),(4,'2020-03-04',60),(5,'2020-02-25',50),(5,'2020-02-27',50),(5,'2020-03-01',50);

select * from Orders244;

# Q35
select a.product_name , sum(o.unit) as Total_Unit
			from Products124 a
            right join Orders244 o on  a.product_id = o.product_id
           where o.order_date  between	'2020-02-01' and '2020-02-28'
            group by product_name
            having Total_Unit>=100;


# Q36

create table if not exists Movies
(
    movie_id int,
    title varchar(50),
    constraint pk PRIMARY KEY (movie_id)
);

insert into Movies VALUES (1,'Avengers'),(2,'Frozen 2'),(3,'Joker');
select * from Movies;


# Table: Users
create table if not exists Users
(
    user_id int,
    name varchar(50),
    constraint pk PRIMARY KEY (user_id)
);

insert into Users VALUES (1,'Daniel'),(2,'Monica'),(3,'Maria'),(4,'James');
select * from Users;

# MovieRating table:
create table if not exists MovieRating
(
    movie_id int,
    user_id int,
    rating int,
    created_at date,
    constraint pk PRIMARY KEY (movie_id, user_id)
);

insert into MovieRating VALUES (1,1,3,'2020-01-12'),(1,2,4,'2020-02-11'),(1,3,2,'2020-02-12'),(1,4,1,'2020-01-01'),(2,1,5,'2020-02-17'),(2,2,2,'2020-02-01'),(2,3,2,'2020-03-01'),(3,1,3,'2020-02-22'),(3,2,4,'2020-02-25');
select * from MovieRating;






# Q36

Create table if not exists Users88
(
	id int,
	name_id varchar(20),
    constraint pk primary key(id)
);

insert into Users88 VALUES (1,'Alice'),(2,'Bob'),(3,'Alex'),(4,'Donald'),(7,'Lee'),(13,'Jonathan'),(19,'Elvis');

select * from Users88;

Create table if not exists Rides101
(
	id int,
	user_id int,
	distance int	
);

insert into Rides101 VALUES (1,1,120),(2,2,317),(3,3,222),(4,7,100),(5,13,312),(6,19,50),(7,7,120),(8,19,400),(9,7,230);

select * from Rides101;


select u.name_id, sum(ifnull(R.distance,0)) as Travelled_Distance
			from Users88 as u 
				left join Rides101 as R on u.id = R.user_id
					group by name_id
                    order by Travelled_Distance desc;




Create table if not exists Departments
(
	id int,
	name_id varchar(20),
    constraint pk primary key(id)
);

alter table Departments modify Column name_id varchar(50);
insert into Departments VALUES (1,'Electrical Engineering'),(7,'Computer Engineering'),(13,'Business Administration');

select * from Departments;

Create table if not exists Students12
(
	id int,
	name_i varchar(20),
	department_id int,
	constraint pk primary key(id)
);


insert into Students12 VALUES (23,'Alice',1),(1,'Bob',7),(5,'Jennifer',13),(2,'John',14),(4,'Jasmine',77),(3,'Steve',74),(6,'Luis',1),(8,'Jonathan',7),(7,'Daiana',33),(11,'Madelynn',1);

select * from Students12;

select b.id, b.name_i,a.name_id
		from Students12 as b, Departments as a
        left join Departments  on b.department_id = a.id
			where a.id is null;

select b.id, b.name_i,a.name_id
		from Students12 as b, Departments as a
        where b.department_id = a.id ;
            
create table if not exists Calls
(
    from_id int,
    to_id int,
    duration int
);

insert into Calls VALUES (1,2,59),(2,1,11),(1,3,20),(3,4,100),(3,4,200),(3,4,200),(4,3,499);

select * from Calls;


SELECT LEAST(from_id,to_id) as person1,
GREATEST(from_id,to_id) as person2,
COUNT(*) as call_count,
SUM(duration) as total_duration
FROM Calls
GROUP BY person1,person2;

select least(from_id,to_id) as person1,
greatest(from_id,to_id) as person2,
count(*) as call_count,
sum(duration) as total_duration
from Calls 
group by person1 , person2;





create table if not exists Warehouse1
(
    name_id VARCHAR(50),
    product_id int,
    units int,
    constraint pk PRIMARY KEY (name_id, product_id)
);

insert into Warehouse1 VALUES ('LCHouse1',1,1),('LCHouse1',2,10),('LCHouse1',3,5),('LCHouse2',1,2),('LCHouse2',2,2),('LCHouse3',4,1);
select * from Warehouse1;

# Table: Products
create table if not exists Products
(
    product_id int,
    product_name VARCHAR(50),
    Width int,
    Length int,
    Height int,
    constraint pk PRIMARY KEY (product_id)
);

insert into Products VALUES (1,'LC-TV',5,50,40),(2,'LC-KeyChain',5,5,5),(3,'LC-Phone',2,10,10),(4,'LC-T-Shirt',4,10,20);

select * from Products;


# Write an SQL query to report the number of cubic feet of volume the inventory occupies in each warehouse.
# Return the result table in any order.




select w.name_id,sum(((b.Width)*(b.Length)*(b.Height))*w.units) as Volume
          from Warehouse1 as w
          left join Products as b on b.product_id = w.product_id
          group by name_id;

select name_id as warehouse_name ,sum(units*vol) as volume
		from warehouse as w
        join ( select  product_id, Width*Length*Height as vol
     from Products ) p 
     on w.product_id = p.product_id
     group by
     name_id;

select w.name_id,sum(((b.Width)*(b.Length)*(b.Height))*w.units) as Volume
          from Products as b 
          left join Warehouse1 as w on b.product_id = w.product_id
          group by name_id;


# Q40.
# Table: Prices
create table if not exists Prices
(
    product_id int,
    start_date date,
    end_date date,
    price int,
    constraint pk PRIMARY KEY (product_id, start_date, end_date)
);

insert into Prices VALUES (1,'2019-02-17','2019-02-28',5), (1,'2019-03-01','2019-03-22',20), (2,'2019-02-01','2019-02-20',15), (2,'2019-02-21','2019-03-31',30);

select * from Prices;

# UnitsSold table:
create table if not exists UnitsSold
(
    product_id int,
    purchase_date date,
    units int
);

insert into UnitsSold VALUES (1,'2019-02-25',100),(1,'2019-03-01',15),(2,'2019-02-10',200),(2,'2019-03-22',30);

select * from UnitsSold;


select u.Product_id , round(sum((u.units) * (p.price))/sum(u.units),2) as average_price
		from Prices as p
        left join UnitsSold as u 
        on p.product_id = u.producwt_id
			group by p.product_id;


select p.product_id, 
    round(sum(p.price * u.units)/sum(u.units), 2) as average_price
from Prices p
left join UnitsSold u
on p.product_id = u.product_id 
group by p.product_id;



create table if not exists Sales
(
    sale_date date,
    fruit enum("apples","oranges"),
    sold_num int,
    constraint pk PRIMARY KEY (sale_date, fruit)
);

insert into Sales VALUES ('2020-05-01','apples',10),('2020-05-01','oranges',8),('2020-05-02','apples',15),('2020-05-02','oranges',15),('2020-05-03','apples',20),('2020-05-03','oranges',0),('2020-05-04','apples',15),('2020-05-04','oranges',16);

select * from Sales;


select a.sale_date, (a.sold_num - b.sold_num) as diff
	from sales a 
    left join sales b on a.sale_date = b.sale_date
    where a.fruit = 'apples' and b.fruit = 'oranges';
    
	
    
select a.sale_date, (a.sold_num - b.sold_num) as diff
	from sales a 
    left join sales b on a.sale_date = b.sale_date
    where a.fruit = 'apples' and b.fruit = 'oranges';
    
    
    
    
create table if not exists Employee
(
    id int,
    name VARCHAR(50),
    department VARCHAR(50),
    managerId int default null,
    constraint pk PRIMARY KEY (id)
);


insert into Employee VALUES (101,'John','A',null), (102,'Dan','A',101), (103,'James','A',101), (104,'Amy','A',101), (105,'Anne','A',101), (106,'Ron','B',101);

select * from Employee;
	
    
select 
	a.name
from Employee as a
	inner join Employee as b on (a.id = b.managerID)
    group by a.name
    having count(distinct b.id) >= 5;
    

select Name from Employee
where Id in
(
   select ManagerId from Employee
   group by 1
   having count(*) >= 5
);



# Q45.
# Table: Department


create table if not exists Department145
(
    dept_id int,
    dept_name VARCHAR(50),
    constraint pk PRIMARY KEY (dept_id)
);


insert into Department145 VALUES (1,'Engineering'),(2,'Science'),(3,'Law');

select * from Department145;

# Table: Student
create table if not exists Student24
(
    student_id int,
    student_name VARCHAR(50),
    gender VARCHAR(50),
    dept_id int,
    constraint pk PRIMARY KEY (student_id),
    constraint fk FOREIGN KEY (dept_id) REFERENCES Department145(dept_id)
);

insert into Student24 VALUES (1,'Jack','M',1),(2,'Jane','F',1),(3,'Mark','M',2);

select * from Student24;

# Write an SQL query to report the respective department name and number of students majoring in
# each department for all departments in the Department table (even ones with no current students).
# Return the result table ordered by student_number in descending order. In case of a tie, order them by
# dept_name alphabetically.


select a.dept_id,
		coalesce(count(student_id), 0) as student_number
        
        from department145 as a
        left join Student24 as s
        on 
        (a.dept_id = s.dept_id)
        group by s.dept_id
		order by student_number desc, a.dept_name asc;
